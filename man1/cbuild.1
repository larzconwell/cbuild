.TH CBUILD "1" "2014" "" ""

.SH NAME
cbuild \- Simple C build tool

.SH SYNOPSIS
cbuild [
.B -c
] [
.B -o
.I outfile
]
.I infile...

.SH DESCRIPTION
cbuild is a build tool for C programs. It makes it easy to compile projects
that need cross platform compatibility. cbuild uses the host systems GCC installation
to compile and link code.

cbuild makes it easy to compile cross platforms by separating implementations for
different systems in files identified by their os and architecture name. Build
constraints are detailed below.

.SH OPTIONS
.B -c
    Compile or assemble the source files, but do not link. The output is an
    archive of objects.

    It's important to notice here that the output isn't an object but an archive.
    This differs from standard GCC output, and is this way to allow multiple source
    files objects to be contained in a single place.

.B -o
.I file
    Write output to a file. It applies to all files, whether it's an executable,
    archive, or anything else.

    By default archives will be out.a, and binaries will be out(out.exe for Windows).

.SH BUILD CONSTRAINTS
When passing arguments to cbuild if a path has an extension, it doesn't have
any build constraints. For source files this means they are compiled regardless
of the destination platform. For other non source files(such as objects, and
archives) they are only consulted during the linking/archiving steps.

If the path doesn't have an extension it looks at all the paths that start with
the file name.

When checking if a path should be included for the build, first it checks if
the path has a build tag in the file. A build tag starts with "// +build" and
should be located in one of the top ten lines of the file. The extended comment
format /**/ is not supported. The format is evaluated as the OR of space-separated
options; each option evaluates as the AND of its comma-separated terms. Each term
should be a supported OS or ARCH; if the terms don't consist of a supported OS
or ARCH the path is ignored.

The build tag:

  // +build amd64 linux,386 darwin,386 freebsd

Corresponds to the boolean formula:

  (amd64) OR (linux AND 386) OR (darwin AND 386) OR (freebsd)

If the path doesn't have a build tag, it inspects the name. If a paths's name
minus any extension matches one of the following patterns:

  *_OS
  *_ARCH
  *_OS_ARCH

Where OS and ARCH are one of the supported platforms, the path is considered
to have an implicit build tag requiring those terms.

If the file has no build tags, or its name doesn't match the file patterns then
it's always included for the build.

.SH RECOGNIZED SOURCE EXTENSIONS
The following extensions are supported for cbuild. If a path is given and its
extension can't be found in the list below, it's passed straight to the
linker/archiver.

.B .c
.B .cxx
.B .cpp
.B .c++
.B .s
.B .S
.B .asm

.SH ENVIRONMENT
This section describes the environment variables that affect the compiler,
assembler and other tools operations.

.B OS
= dependent
    OS sets the destination os to compile/link for. The default value is the
    name for the current os.

    Valid values:
      - \fBwindows
      - \fBdarwin
      - \fBlinux
      - \fBfreebsd
      - \fBnetbsd
      - \fBopenbsd

.B ARCH
= dependent
    ARCH sets the destination architecture to compile and link for. The default
    value is the current architecture.

    Valid values:
      - \fB386
      - \fBamd64
      - \fBarm

.B CFLAGS
    Flags to give to the compiler.

.B CPPFLAGS
    Flags to give to the preprocessor.

.B LDFLAGS
    Flags to give to the compiler when invoking the linker. Libraries(-llib)
    should be added to LDLIBS variable instead.

.B LDLIBS
    Flags to give to compiler when invoking the linker. Libraries(-llib) should
    be given here to ensure correct placement, since they're required to be
    placed in a specific position in common compilers.
